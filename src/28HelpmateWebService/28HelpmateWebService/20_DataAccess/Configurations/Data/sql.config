<?xml version="1.0" encoding="utf-8" ?>
<dataOperations xmlns="http://www.w3.org/DataOperation"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!--Insert and update-->
  <dataCommand name="InsertOrUpdateActivityInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.ActivityInfo where ID = @ID)
 begin 
update dbo.ActivityInfo
set	Title=@Title,
AcType=@AcType,
Content=@Content,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.ActivityInfo 
 (Title,
AcType,
Content,
Status,
CreateBy 
)values(
@Title,
@AcType,
@Content,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateAdvertisement" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.Advertisement where ID = @ID)
 begin 
update dbo.Advertisement
set	AdName=@AdName,
AdPicture=@AdPicture,
Comment=@Comment,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.Advertisement 
 (AdName,
AdPicture,
Comment,
Status,
CreateBy 
)values(
@AdName,
@AdPicture,
@Comment,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateBidDetail" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.BidDetail where ID = @ID)
 begin 
update dbo.BidDetail
set	BidID=@BidID,
[Index]=@Index,
StartDate=@StartDate,
EndDate=@EndDate,
Principal=@Principal,
RefundAccrual=@RefundAccrual,
RefundAmount=@RefundAmount,
OverDayAccrual=@OverDayAccrual,
LateFee=@LateFee,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.BidDetail 
 (BidID,
[Index],
StartDate,
EndDate,
Principal,
RefundAccrual,
RefundAmount,
OverDayAccrual,
LateFee,
RewardFee,
Status,
CreateDate,
CreateBy 
)values(
@BidID,
@Index,
@StartDate,
@EndDate,
@Principal,
@RefundAccrual,
@RefundAmount,
@OverDayAccrual,
@LateFee,
@RewardFee,
@Status,
getdate(),
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateBidHead" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.BidHead where ID = @ID)
 begin 
update dbo.BidHead
set	UserID=@UserID,
Title=@Title,
BidType=@BidType,
Guarantee=@Guarantee,
Amount=@Amount,
Usage=@Usage,
Term=@Term,
Paymethod=@Paymethod,
Rate=@Rate,
Reward=@Reward,
EffectDays=@EffectDays,
Surety=@Surety,
Status=@Status,
Details=@Details,
Comment=@Comment,
StartDate=@StartDate,
EndDate=@EndDate,
Deposit=@Deposit,
ManageFee=@ManageFee,
TotalRefund=@TotalRefund,
ActualReceive=@ActualReceive,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 begin
 insert into dbo.BidHead 
 (UserID,
Title,
BidType,
Guarantee,
Amount,
Usage,
Term,
Paymethod,
Rate,
Reward,
EffectDays,
Surety,
Status,
Details,
Comment,
StartDate,
EndDate,
Deposit,
ManageFee,
TotalRefund,
ActualReceive,
RefundStatus,
CreateBy 
)values(
@UserID,
@Title,
@BidType,
@Guarantee,
@Amount,
@Usage,
@Term,
@Paymethod,
@Rate,
@Reward,
@EffectDays,
@Surety,
@Status,
@Details,
@Comment,
@StartDate,
@EndDate,
@Deposit,
@ManageFee,
@TotalRefund,
@ActualReceive,
1,
@CreateBy
)
set @ID=SCOPE_IDENTITY()
end
   ]]>
    </commandText>
    <parameters>
      <param name="@ID" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateDictionaryInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.DictionaryInfo where ID = @ID)
 begin 
update dbo.DictionaryInfo
set	Name=@Name,
Value=@Value,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.DictionaryInfo 
 (Name,
Value,
CreateBy 
)values(
@Name,
@Value,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateInvestRecord" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.InvestRecord where ID = @ID)
 begin 
update dbo.InvestRecord
set	UserID=@UserID,
BidID=@BidID,
InvestAmount=@InvestAmount,
ReturnAmount=@ReturnAmount,
--ReturnDate=@ReturnDate,
--ReturnMethod=@ReturnMethod,
Status=@Status,
UserConfirmStatus=@UserConfirmStatus,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 begin
 IF EXISTS (SELECT TOP 1 1 FROM dbo.UserAccountInfo WHERE UserID = @UserID AND TotalAmount >= @InvestAmount)
 BEGIN
     DECLARE @InvestedAmount decimal(18,6)
     SELECT @InvestedAmount = SUM(InvestAmount) FROM dbo.InvestRecord WHERE BidID = @BidID
     
     DECLARE @LoanAmount decimal(18,6)
     DECLARE @RewardRate decimal(18,6)
     SELECT @LoanAmount = Amount , @RewardRate = Reward FROM dbo.BidHead WHERE ID = @BidID
     
     IF (@LoanAmount >= ISNULL(@InvestedAmount,0) + @InvestAmount)
     BEGIN
         BEGIN TRANSACTION UP
         UPDATE dbo.UserAccountInfo SET TotalAmount = TotalAmount - @InvestAmount WHERE UserID = @UserID
         
           insert into dbo.InvestRecord 
           (UserID,
          BidID,
          InvestAmount,
          ReturnAmount,
          --ReturnDate,
          --ReturnMethod,
          Status,
          UserConfirmStatus,
          TradeNo,
          CreateBy 
          )values(
          @UserID,
          @BidID,
          @InvestAmount,
          @ReturnAmount,
          --@ReturnDate,
          --@ReturnMethod,
          @Status,
          @UserConfirmStatus,
          @TradeNo,
          @CreateBy
        )
        
       /* --如果已满标，需要把奖励直接划到投资者账户；投资状态变为2-审核通过以及更新投资的Reward；更新贷款的状态为3-已满标
        IF(@LoanAmount = ISNULL(@InvestedAmount,0) + @InvestAmount)
        BEGIN          
          IF @RewardRate > 0
          BEGIN 
          --更新投资状态和投资奖励
          UPDATE A
          SET A.Status = 2,
              A.Reward = A.InvestAmount * ISNULL(B.Reward,0)
          FROM dbo.InvestRecord A
          INNER JOIN dbo.BidHead B
          ON A.BidID = B.ID
          WHERE B.ID = @BidID
          
            --更新投资者账户，划入投资奖励
            UPDATE acc
            SET acc.TotalAmount = acc.TotalAmount + A.InvestAmount * ISNULL(B.Reward,0)
            FROM dbo.UserAccountInfo acc
            INNER JOIN dbo.InvestRecord A
            ON acc.UserID = A.UserID
            INNER JOIN dbo.BidHead B
            ON A.BidID = B.ID
            WHERE B.ID = @BidID
          
            --插入投资奖励交易记录
            INSERT INTO dbo.UserAccountTradeInfo 
            (UserID,
            TradeType,
            TradeWay,
            HandlingCharge,
            TradeAmount,
            Description,
            TradeDestinationName,
            TradeDestinationID,
            TradeNo,
            Status,
            CreateBy)
            SELECT A.UserID,3,1,0,A.InvestAmount * ISNULL(B.Reward,0),'投资奖励','','','',2,'system'
            FROM dbo.InvestRecord A
            INNER JOIN dbo.BidHead B
            ON A.BidID = B.ID
            WHERE B.ID = @BidID
          
            --插入消息通知投资者
            
            INSERT INTO dbo.UserMessage (ReceiveUserName,Title,Content,Status,CreateBy)
            SELECT suser.UserName,'投资奖励入账','您的投资奖励【￥'+ STR(A.Reward) +'】已入账，请到【我的账户】查看。',1,'system'
            FROM dbo.InvestRecord A
            INNER JOIN dbo.S_Auth_User suser
            ON A.UserID = suser.ID
            WHERE A.BidID = @BidID
            
          END --End of IF @RewardRate > 0
          */
          
          IF (@@Error <> 0)
	          BEGIN
		          ROLLBACK TRANSACTION UP
	          END
	          ELSE
		          COMMIT TRANSACTION UP
        --END
    END
END
end
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateInvestReturnAccrual" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.InvestReturnAccrual where ID = @ID)
 begin 
update dbo.InvestReturnAccrual
set	InvestID=@InvestID,
BidID=@BidID,
BidDetailID=@BidDetailID,
Amount=@Amount,
Reward = @Reward,
ManageFee=@ManageFee,
StartDate=@StartDate,
EndDate=@EndDate,
Status=@Status,
UserConfirmStatus=@UserConfirmStatus,
ReceiveDate=@ReceiveDate,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.InvestReturnAccrual 
 (InvestID,
BidID,
BidDetailID,
Amount,
Reward,
ManageFee,
StartDate,
EndDate,
Status,
UserConfirmStatus,
ReceiveDate,
CreateBy 
)values(
@InvestID,
@BidID,
@BidDetailID,
@Amount,
@Reward,
@ManageFee,
@StartDate,
@EndDate,
@Status,
@UserConfirmStatus,
@ReceiveDate,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateInvestReturnPrincipal" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.InvestReturnPrincipal where ID = @ID)
 begin 
update dbo.InvestReturnPrincipal
set	InvestID=@InvestID,
BidID=@BidID,
BidDetailID=@BidDetailID,
Amount=@Amount,
Status=@Status,
UserConfirmStatus=@UserConfirmStatus,
ReceiveDate=@ReceiveDate,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.InvestReturnPrincipal 
 (InvestID,
BidID,
BidDetailID,
Amount,
Status,
UserConfirmStatus,
ReceiveDate,
CreateBy 
)values(
@InvestID,
@BidID,
@BidDetailID,
@Amount,
@Status,
@UserConfirmStatus,
@ReceiveDate,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateOverDayDetail" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.OverDayDetail where ID = @ID)
 begin 
update dbo.OverDayDetail
set	BidDetailID=@BidDetailID,
OverDay=@OverDay,
OverDayAccrual=@OverDayAccrual,
LateFee=@LateFee,
ForceFee=@ForceFee,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.OverDayDetail 
 (BidDetailID,
OverDay,
OverDayAccrual,
LateFee,
ForceFee,
CreateBy 
)values(
@BidDetailID,
@OverDay,
@OverDayAccrual,
@LateFee,
@ForceFee,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateS_Auth_Moudle" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.S_Auth_Moudle where ID = @ID)
 begin 
update dbo.S_Auth_Moudle
set	Moudle_Name=@Moudle_Name,
ParentID=@ParentID,
Moudle_Link=@Moudle_Link,
Status=@Status,
Comment=@Comment,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.S_Auth_Moudle 
 (Moudle_Name,
ParentID,
Moudle_Link,
Status,
Comment,
CreateBy 
)values(
@Moudle_Name,
@ParentID,
@Moudle_Link,
@Status,
@Comment,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateS_Auth_Role" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.S_Auth_Role where ID = @ID)
 begin 
update dbo.S_Auth_Role
set	RoleName=@RoleName,
Email=@Email,
Comment=@Comment,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.S_Auth_Role 
 (RoleName,
Email,
Comment,
Status,
CreateBy 
)values(
@RoleName,
@Email,
@Comment,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateS_Auth_RoleMoudle" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
 insert into dbo.S_Auth_RoleMoudle 
 (RoleID,
MoudleID,
CreateBy 
)values(
@RoleID,
@MoudleID,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateS_Auth_RoleUser" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
 insert into dbo.S_Auth_RoleUser 
 (RoleID,
UserID,
CreateBy 
)values(
@RoleID,
@UserID,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateS_Auth_User" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.S_Auth_User where ID = @ID)
 begin 
update dbo.S_Auth_User
set	UserName=@UserName,
Email=@Email,
Password=@Password,
RecommandPerson=@RecommandPerson,
IsVIP=@IsVIP,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 begin
 insert into dbo.S_Auth_User 
 (UserName,
Email,
Password,
RecommandPerson,
IsVIP,
Status,
CreateBy 
)values(
@UserName,
@Email,
@Password,
@RecommandPerson,
@IsVIP,
@Status,
@CreateBy
);
set @ID=SCOPE_IDENTITY()
end
   ]]>
    </commandText>
    <parameters>
      <param name="@ID" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserAccountInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserAccountInfo where ID = @ID)
 begin 
update dbo.UserAccountInfo
set	UserID=ISNULL(@UserID,UserID),
TotalAmount=ISNULL(@TotalAmount,TotalAmount),
PawnWorth=ISNULL(@PawnWorth,PawnWorth),
LimitAmount = ISNULL(@LimitAmount,LimitAmount),
Status= ISNULL(@Status,Status),
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserAccountInfo 
 (UserID,
TotalAmount,
PawnWorth,
LimitAmount,
Status,
CreateBy 
)values(
@UserID,
@TotalAmount,
@PawnWorth,
@LimitAmount,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserAccountTradeInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserAccountTradeInfo where TradeNo = @TradeNo)
 begin 
set @ID=-2;
 end
 else
 begin
 insert into dbo.UserAccountTradeInfo 
 (UserID,
TradeType,
TradeWay,
HandlingCharge,
TradeAmount,
Description,
TradeDestinationName,
TradeDestinationID,
TradeNo,
Status,
CreateBy 
)values(
@UserID,
@TradeType,
@TradeWay,
@HandlingCharge,
@TradeAmount,
@Description,
@TradeDestinationName,
@TradeDestinationID,
@TradeNo,
@Status,
@CreateBy
)

SET @ID = SCOPE_IDENTITY()
end

   ]]>
    </commandText>
    <parameters>
      <param name="@ID" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserCarInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserCarInfo where ID = @ID)
 begin 
update dbo.UserCarInfo
set	UserID=@UserID,
BuyWay=@BuyWay,
Brand=@Brand,
Model=@Model,
BuyTime=@BuyTime,
Mileage=@Mileage,
Insurance=@Insurance,
CalcPrice=@CalcPrice,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserCarInfo 
 (UserID,
BuyWay,
Brand,
Model,
BuyTime,
Mileage,
Insurance,
CalcPrice,
Status,
CreateBy 
)values(
@UserID,
@BuyWay,
@Brand,
@Model,
@BuyTime,
@Mileage,
@Insurance,
@CalcPrice,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserCompanyInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserCompanyInfo where ID = @ID)
 begin 
update dbo.UserCompanyInfo
set	UserID=@UserID,
CompanyName=@CompanyName,
Property=@Property,
Trade=@Trade,
Position=@Position,
WorkYear=@WorkYear,
CompanyPhone=@CompanyPhone,
CompanyAddress=@CompanyAddress,
CompanySite=@CompanySite,
Witness=@Witness,
WitnessPhone=@WitnessPhone,
Remark=@Remark,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserCompanyInfo 
 (UserID,
CompanyName,
Property,
Trade,
Position,
WorkYear,
CompanyPhone,
CompanyAddress,
CompanySite,
Witness,
WitnessPhone,
Remark,
Status,
CreateBy 
)values(
@UserID,
@CompanyName,
@Property,
@Trade,
@Position,
@WorkYear,
@CompanyPhone,
@CompanyAddress,
@CompanySite,
@Witness,
@WitnessPhone,
@Remark,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserContractInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserContractInfo where ID = @ID)
 begin 
update dbo.UserContractInfo
set	UserID=@UserID,
MobilePhone=@MobilePhone,
Telephone=@Telephone,
ProvinceID=@ProvinceID,
CityID=@CityID,
AreaID=@AreaID,
PostNo=@PostNo,
Address=@Address,
MSN=@MSN,
QQ=@QQ,
TaobaoWW=@TaobaoWW,
FirstRelativeName=@FirstRelativeName,
FirstRelation=@FirstRelation,
FirstMobile=@FirstMobile,
SecondRelativeName=@SecondRelativeName,
SecondRelation=@SecondRelation,
SecondMobile=@SecondMobile,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserContractInfo 
 (UserID,
MobilePhone,
Telephone,
ProvinceID,
CityID,
AreaID,
PostNo,
Address,
MSN,
QQ,
TaobaoWW,
FirstRelativeName,
FirstRelation,
FirstMobile,
SecondRelativeName,
SecondRelation,
SecondMobile,
Status,
CreateBy 
)values(
@UserID,
@MobilePhone,
@Telephone,
@ProvinceID,
@CityID,
@AreaID,
@PostNo,
@Address,
@MSN,
@QQ,
@TaobaoWW,
@FirstRelativeName,
@FirstRelation,
@FirstMobile,
@SecondRelativeName,
@SecondRelation,
@SecondMobile,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserDebtInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserDebtInfo where ID = @ID)
 begin 
update dbo.UserDebtInfo
set	UserID=@UserID,
DebtType=@DebtType,
DebtTotal=@DebtTotal,
DebtByMonth=@DebtByMonth,
DebtTerm=@DebtTerm,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserDebtInfo 
 (UserID,
DebtType,
DebtTotal,
DebtByMonth,
DebtTerm,
Status,
CreateBy 
)values(
@UserID,
@DebtType,
@DebtTotal,
@DebtByMonth,
@DebtTerm,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserHouseInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserHouseInfo where ID = @ID)
 begin 
update dbo.UserHouseInfo
set	UserID=@UserID,
HouseLocation=@HouseLocation,
HouseArea=@HouseArea,
BulidTime=@BulidTime,
PayMethodID=@PayMethodID,
Owner1=@Owner1,
Owner1Percent=@Owner1Percent,
Owner2=@Owner2,
Owner2Percent=@Owner2Percent,
DebtYear=@DebtYear,
PayByMonth=@PayByMonth,
LeftDebt=@LeftDebt,
Bank=@Bank,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserHouseInfo 
 (UserID,
HouseLocation,
HouseArea,
BulidTime,
PayMethodID,
Owner1,
Owner1Percent,
Owner2,
Owner2Percent,
DebtYear,
PayByMonth,
LeftDebt,
Bank,
Status,
CreateBy 
)values(
@UserID,
@HouseLocation,
@HouseArea,
@BulidTime,
@PayMethodID,
@Owner1,
@Owner1Percent,
@Owner2,
@Owner2Percent,
@DebtYear,
@PayByMonth,
@LeftDebt,
@Bank,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserInfo where ID = @ID)
 begin 
update dbo.UserInfo
set	UserID=@UserID,
NickName=@NickName,
Sex=@Sex,
Introduction=@Introduction,
RealName=@RealName,
CertificateType=@CertificateType,
CertificateNo=@CertificateNo,
NativePlace=@NativePlace,
MaritalStatus=@MaritalStatus,
ChildStatus=@ChildStatus,
Degree = @Degree,
SalaryLevel=@SalaryLevel,
HasSheBao=@HasSheBao,
SheBaoNo=@SheBaoNo,
HouseStatus=@HouseStatus,
HasCar=@HasCar,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserInfo 
 (UserID,
NickName,
Sex,
Introduction,
RealName,
CertificateType,
CertificateNo,
NativePlace,
MaritalStatus,
ChildStatus,
Degree,
SalaryLevel,
HasSheBao,
SheBaoNo,
HouseStatus,
HasCar,
Status,
CreateBy 
)values(
@UserID,
@NickName,
@Sex,
@Introduction,
@RealName,
@CertificateType,
@CertificateNo,
@NativePlace,
@MaritalStatus,
@ChildStatus,
@Degree,
@SalaryLevel,
@HasSheBao,
@SheBaoNo,
@HouseStatus,
@HasCar,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserManagementInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserManagementInfo where ID = @ID)
 begin 
update dbo.UserManagementInfo
set	UserID=@UserID,
ManageType=@ManageType,
Amount=@Amount,
Description=@Description,
BeginDate=@BeginDate,
EndDate=@EndDate,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserManagementInfo 
 (UserID,
ManageType,
Amount,
Description,
BeginDate,
EndDate,
CreateBy 
)values(
@UserID,
@ManageType,
@Amount,
@Description,
@BeginDate,
@EndDate,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserMessage" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserMessage where ID = @ID)
 begin 
update dbo.UserMessage
set	ReceiveUserName=@ReceiveUserName,
Title=@Title,
Content=@Content,
Status=@Status
where ID = @ID
 end
 else
 insert into dbo.UserMessage 
 (ReceiveUserName,
Title,
Content,
Status,
CreateBy 
)values(
@ReceiveUserName,
@Title,
@Content,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserOtherInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserOtherInfo where ID = @ID)
 begin 
update dbo.UserOtherInfo
set	UserID=@UserID,
HighestDegree=@HighestDegree,
HighestSchool=@HighestSchool,
Profession=@Profession,
GraduateTime=@GraduateTime,
Ability=@Ability,
Interest=@Interest,
OtherIntroduction=@OtherIntroduction,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserOtherInfo 
 (UserID,
HighestDegree,
HighestSchool,
Profession,
GraduateTime,
Ability,
Interest,
OtherIntroduction,
Status,
CreateBy 
)values(
@UserID,
@HighestDegree,
@HighestSchool,
@Profession,
@GraduateTime,
@Ability,
@Interest,
@OtherIntroduction,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserPawnInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserPawnInfo where ID = @ID)
 begin 
update dbo.UserPawnInfo
set	UserID=@UserID,
PawnName=@PawnName,
Estimate=@Estimate,
Description=@Description,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserPawnInfo 
 (UserID,
PawnName,
Estimate,
Description,
CreateBy 
)values(
@UserID,
@PawnName,
@Estimate,
@Description,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserPropertyOther" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserPropertyOther where ID = @ID)
 begin 
update dbo.UserPropertyOther
set	UserID=@UserID,
Comment=@Comment,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserPropertyOther 
 (UserID,
Comment,
Status,
CreateBy 
)values(
@UserID,
@Comment,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserSpouseInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserSpouseInfo where ID = @ID)
 begin 
update dbo.UserSpouseInfo
set	UserID=@UserID,
RealName=@RealName,
SalaryLevel=@SalaryLevel,
MobilePhone=@MobilePhone,
CompanyName=@CompanyName,
CompanyPhone=@CompanyPhone,
Position=@Position,
CompanyAddress=@CompanyAddress,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserSpouseInfo 
 (UserID,
RealName,
SalaryLevel,
MobilePhone,
CompanyName,
CompanyPhone,
Position,
CompanyAddress,
Status,
CreateBy 
)values(
@UserID,
@RealName,
@SalaryLevel,
@MobilePhone,
@CompanyName,
@CompanyPhone,
@Position,
@CompanyAddress,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserTradeInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserTradeInfo where ID = @ID)
 begin 
update dbo.UserTradeInfo
set	UserID=@UserID,
Property=@Property,
SetupDate=@SetupDate,
BusinessPlace=@BusinessPlace,
Rent=@Rent,
RentTime=@RentTime,
TaxNo=@TaxNo,
GongShangNo=@GongShangNo,
ProfitByYear=@ProfitByYear,
EmployeeNumber=@EmployeeNumber,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserTradeInfo 
 (UserID,
Property,
SetupDate,
BusinessPlace,
Rent,
RentTime,
TaxNo,
GongShangNo,
ProfitByYear,
EmployeeNumber,
Status,
CreateBy 
)values(
@UserID,
@Property,
@SetupDate,
@BusinessPlace,
@Rent,
@RentTime,
@TaxNo,
@GongShangNo,
@ProfitByYear,
@EmployeeNumber,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserWorkExperience" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserWorkExperience where ID = @ID)
 begin 
update dbo.UserWorkExperience
set	UserID=@UserID,
BeginTime=@BeginTime,
EndTime=@EndTime,
Company=@Company,
Department=@Department,
Witness=@Witness,
WitnessPhone=@WitnessPhone,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where ID = @ID
 end
 else
 insert into dbo.UserWorkExperience 
 (UserID,
BeginTime,
EndTime,
Company,
Department,
Witness,
WitnessPhone,
Status,
CreateBy 
)values(
@UserID,
@BeginTime,
@EndTime,
@Company,
@Department,
@Witness,
@WitnessPhone,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserCreditInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserCreditInfo where UserID = @UserID and CreditType=@CreditType)
 begin 
update dbo.UserCreditInfo
set	UserID=@UserID,
CreditType=@CreditType,
CreditName=@CreditName,
Comment=@Comment,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where UserID = @UserID and CreditType=@CreditType
 end
 else
 insert into dbo.UserCreditInfo 
 (UserID,
CreditType,
CreditName,
Comment,
Status,
CreateBy 
)values(
@UserID,
@CreditType,
@CreditName,
@Comment,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateUserAuthenticationInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.UserAuthenticationInfo where UserID = @UserID and AuthType=@AuthType)
 begin 
update dbo.UserAuthenticationInfo
set	UserID=@UserID,
AuthType=@AuthType,
Comment=@Comment,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where UserID=@UserID and AuthType=@AuthType
 end
 else
 insert into dbo.UserAuthenticationInfo 
 (UserID,
AuthType,
Comment,
Status,
CreateBy 
)values(
@UserID,
@AuthType,
@Comment,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="UpdateUserBankInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        IF EXISTS(SELECT TOP 1 1 FROM dbo.UserAccountInfo Where UserID = @UserID)
        
          UPDATE dbo.UserAccountInfo
          SET BankAccount = @BankAccount,
              BankName = @BankName,
              SubBankName = @SubBankName
          WHERE UserID = @UserID
        
        ELSE
        
          INSERT INTO dbo.UserAccountInfo
          (UserID,BankAccount,BankName,SubBankName)
          VALUES
          (@UserID,@BankAccount,@BankName,@SubBankName)
   ]]>
    </commandText>
    <parameters>
    </parameters>
  </dataCommand>
  <dataCommand name="InsertOrUpdateCompanyBankInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.CompanyBankInfo where AccountID = @AccountID)
 begin 
update dbo.CompanyBankInfo
set	AccountName=@AccountName,
AccountID=@AccountID,
BankName=@BankName,
BankImg=@BankImg,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where AccountID = @AccountID
 end
 else
 insert into dbo.CompanyBankInfo 
 (AccountName,
AccountID,
BankName,
BankImg,
Status,
CreateBy 
)values(
@AccountName,
@AccountID,
@BankName,
@BankImg,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <!--Delete-->
  <dataCommand name="DeleteActivityInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.ActivityInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteAdvertisementByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.Advertisement where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteBidDetailByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.BidDetail where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteBidHeadByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.BidHead where ID = @ID
        if @@rowcount > 0
        begin
          delete from dbo.BidDetail where BidID = @ID
        end
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteDictionaryInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.DictionaryInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteInvestRecordByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.InvestRecord where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteInvestReturnAccrualByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.InvestReturnAccrual where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteInvestReturnPrincipalByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.InvestReturnPrincipal where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteOverDayDetailByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.OverDayDetail where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteS_Auth_MoudleByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.S_Auth_Moudle where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteS_Auth_RoleByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.S_Auth_Role where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteS_Auth_RoleMoudleByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.S_Auth_RoleMoudle where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteS_Auth_RoleUserByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.S_Auth_RoleUser where UserID = @UserID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteS_Auth_UserByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.S_Auth_User where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserAccountInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserAccountInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserAccountTradeInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserAccountTradeInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserCompanyInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserCompanyInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserContractInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserContractInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserDebtInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserDebtInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserHouseInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserHouseInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserManagementInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserManagementInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserPropertyOtherByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserPropertyOther where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserCarInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserCarInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserPawnInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserPawnInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserSpouseInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserSpouseInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserTradeInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserTradeInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserMessageByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        Declare @newStatus Int,@UserName varchar(20)

        SELECT @UserName = userName
        FROM dbo.s_auth_user
        where ID = @UserID

        SELECT @newStatus =
               CASE WHEN a.ReceiveUserName = a.CreateBy  OR A.Status in (2,3) THEN 4
                    WHEN a.ReceiveUserName = @UserName AND a.status = 1 THEN 3 
	                  WHEN a.CreateBy = @UserName AND a.status = 1 THEN 2
	             END
        FROM dbo.UserMessage a
        Where a.ID = @ID

        if(@newStatus = 4)--删除
        delete from dbo.UserMessage where ID = @ID
        else--更新
        update	dbo.UserMessage
        SET		Status = @newStatus
        WHERE	ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserCreditInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserCreditInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteUserAuthenticationInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.UserAuthenticationInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="DeleteCompanyBankInfoByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        delete from dbo.CompanyBankInfo where ID = @ID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <!--Select-->
  <dataCommand name="GetActivityInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      
      WITH tmp AS
    (
      select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
              ID,
              Title,
              AcType,
              Content,
              Status,
              CreateDate,
              CreateBy,
              EditDate,
              EditBy
      from dbo.ActivityInfo where status = 1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
    order by createdate desc    
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetAdvertisement" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select top 10 ID,
AdName,
AdPicture,
Comment,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.Advertisement order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetDictionaryInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
Name,
Value,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.DictionaryInfo
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetBidHeadByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select a.*,suser.UserName
 from dbo.BidHead a
 inner join dbo.s_auth_user suser 
 on a.UserID = suser.ID
 where A.UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetBidHeadByID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
         select a.*,suser.UserName
 from dbo.BidHead a
 inner join dbo.s_auth_user suser 
 on a.UserID = suser.ID
 where a.ID = @ID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetBidRecord" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
        SELECT @TotalCount = count(1)
        FROM dbo.BidHead A
        INNER JOIN dbo.s_auth_user suser
        ON A.UserID = suser.ID
        INNER JOIN dbo.DictionaryInfo dic
        ON dic.ID = A.Usage
        WHERE 1=1 @param;
        
      with tmp as
      (
        SELECT
              ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
              A.*,
              suser.UserName,
              dic.Value UsageName 
        FROM dbo.BidHead A
        INNER JOIN dbo.s_auth_user suser
        ON A.UserID = suser.ID
        INNER JOIN dbo.DictionaryInfo dic
        ON dic.ID = A.Usage
        WHERE 1=1 @param
      )
      
      SELECT * FROM tmp
      WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
      order by CreateDate desc
   ]]>
    </commandText>
    <parameters>
      <param name="@TotalCount" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="GetBidDetailByTradeNo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select B.ID,
B.BidID,
B.[Index],
B.StartDate,
B.EndDate,
B.Principal,
B.RefundAccrual,
B.RefundAmount,
B.OverDayAccrual,
B.LateFee,
B.ForceFee,
B.Status,
B.CreateDate,
B.CreateBy,
B.EditDate,
B.EditBy
 from dbo.BidDetail B where ReturnTradeNo = @ReturnTradeNo;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetBidDetailByID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
B.BidID,
B.[Index],
B.StartDate,
B.EndDate,
B.Principal,
B.RefundAccrual,
B.RefundAmount,
B.OverDayAccrual,
B.LateFee,
B.Status,
B.CreateDate,
B.CreateBy,
B.EditDate,
B.EditBy
 from dbo.BidDetail B where B.ID = @ID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetBidDetail" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
B.BidID,
B.[Index],
B.StartDate,
B.EndDate,
B.Principal,
B.RefundAccrual,
B.RefundAmount,
B.OverDayAccrual,
B.LateFee,
B.Status,
B.CreateDate,
B.CreateBy,
B.EditDate,
B.EditBy
 from dbo.BidDetail B where B.BidID = @BidID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetBidDetailsByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select B.ID,
B.BidID,
B.[Index],
B.StartDate,
B.EndDate,
B.Principal,
B.RefundAccrual,
B.RefundAmount,
B.OverDayAccrual,
B.LateFee,
B.Status,
B.CreateDate,
B.CreateBy,
B.EditDate,
B.EditBy
 from dbo.BidHead A
 inner join dbo.BidDetail B
 ON B.BidID = A.ID
 where A.UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetInvestRecord" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        WITH tmp AS
    (
		select	ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
				a.ID,
				a.UserID,
				b.UserName,
				a.BidID,
				a.InvestAmount,
				a.ReturnAmount,
				a.ReturnDate,
				a.ReturnMethod,
				a.Status,
				a.UserConfirmStatus,
				a.CreateDate,
				a.CreateBy,
				a.EditDate,
				a.EditBy,
				a.ApproveBy,
				a.ApproveRemark,
				a.ApproveDate
				from dbo.InvestRecord a
				inner join dbo.S_Auth_User b
				on a.UserID = b.ID
				where 1=1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
    order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetInvestReturnAccrual" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      SELECT @TotalCount = count(1)
      from dbo.InvestReturnAccrual A 
        inner join dbo.BidHead B
        on A.BidID = B.ID
        inner join dbo.s_auth_user suser
        on B.UserID = suser.ID
        where 1 = 1 @param;  
      
      with tmp as
      (
        select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
                A.ID,
                C.Title,
                suser.UserName,
                suser.ID UserID,
                A.InvestID,
                A.BidID,
                A.BidDetailID,
                A.Amount,
                A.Reward,
                A.ManageFee,
                A.StartDate,
                A.EndDate,
                A.Status,
                A.UserConfirmStatus,
                A.ReceiveDate,
                A.CreateDate,
                A.CreateBy,
                A.EditDate,
                A.EditBy          
        from dbo.InvestReturnAccrual A 
        inner join dbo.InvestRecord B
        on A.investID = B.ID
        inner join dbo.BidHead C
        on B.BidID = C.ID
        inner join dbo.s_auth_user suser
        on B.UserID = suser.ID
        where 1 = 1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
    order by CreateDate desc
   ]]>
    </commandText>
    <parameters>
      <param name="@TotalCount" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="GetInvestReturnAccrualByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select a.ID,
a.InvestID,
a.BidID,
a.BidDetailID,
a.Amount,
a.Reward,
a.ManageFee,
a.StartDate,
a.EndDate,
a.Status,
a.UserConfirmStatus,
a.ReceiveDate,
a.CreateDate,
a.CreateBy,
a.EditDate,
a.EditBy
 from dbo.InvestReturnAccrual A
 inner join dbo.InvestRecord B
 ON A.investID = B.ID
 where B.UserID = @UserID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetInvestReturnPrincipalByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select A.ID,
A.InvestID,
A.BidID,
A.BidDetailID,
A.Amount,
A.Status,
A.UserConfirmStatus,
A.ReceiveDate,
A.CreateDate,
A.CreateBy,
A.EditDate,
A.EditBy
 from dbo.InvestReturnPrincipal A
 inner join dbo.InvestRecord B
 on a.InvestID = B.ID
 where b.UserID = @UserID
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <dataCommand name="GetInvestReturnPrincipal" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      SELECT @TotalCount = count(1)
      from dbo.InvestReturnPrincipal A 
        inner join dbo.InvestRecord B
        on A.InvestID = B.ID
        inner join dbo.s_auth_user suser
        on B.UserID = suser.ID
        where 1 = 1 @param;  
      
      with tmp as
      (
        select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
                A.ID,
                C.Title,
                suser.UserName,
                suser.ID UserID,
                A.InvestID,
                A.BidID,
                A.BidDetailID,
                A.Amount,
                A.Status,
                A.UserConfirmStatus,
                A.ReceiveDate,
                A.CreateDate,
                A.CreateBy,
                A.EditDate,
                A.EditBy
        from dbo.InvestReturnPrincipal A
        inner join dbo.InvestRecord B
        on A.InvestID = B.ID
        inner join dbo.BidHead C
        on B.BidID = C.ID
        inner join dbo.s_auth_user suser
        on B.UserID = suser.ID
        where 1 = 1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
    order by CreateDate desc
   ]]>
    </commandText>
    <parameters>
      <param name="@TotalCount" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>

  <dataCommand name="GetOverDayDetail" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
BidDetailID,
OverDay,
OverDayAccrual,
LateFee,
ForceFee,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.OverDayDetail where BidDetailID = @BidDetailID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetS_Auth_User" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserName,
Email,
Password,
RecommandPerson,
IsVIP,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.S_Auth_User where ID = @UserID AND UserType = @UserType;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetS_Auth_UserByUserName" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserName,
Email,
Password,
RecommandPerson,
IsVIP,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.S_Auth_User where UserName = @UserName AND UserType = @UserType;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserAccountInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select acc.ID,
acc.UserID,
acc.TotalAmount,
acc.PawnWorth,
acc.LimitAmount,
acc.BankAccount,
acc.BankName,
acc.SubBankName,
acc.Status,
acc.CreateDate,
acc.CreateBy,
acc.EditDate,
acc.EditBy,
uInfo.RealName
 from dbo.UserAccountInfo acc
 inner join dbo.s_auth_user suser 
 on acc.UserID = suser.ID
 left join dbo.UserInfo uInfo
 on suser.ID = uInfo.UserID
 where acc.UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserAccountInfoByCondition" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      select @TotalCount = COUNT(1)
       from dbo.UserAccountInfo acc
       inner join dbo.s_auth_user suser 
       on acc.UserID = suser.ID
       left join dbo.UserInfo uInfo
       on suser.ID = uInfo.UserID
       where 1 = 1 @param;
      
      with tmp as(
        select 
            ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
            acc.ID,
            acc.UserID,
            acc.TotalAmount,
            acc.PawnWorth,
            acc.LimitAmount,
            acc.Grade,
            acc.BankAccount,
            acc.BankName,
            acc.SubBankName,
            acc.Status,
            acc.CreateDate,
            acc.CreateBy,
            acc.EditDate,
            acc.EditBy,
            uInfo.RealName,
            suser.UserName
       from dbo.UserAccountInfo acc
       inner join dbo.s_auth_user suser 
       on acc.UserID = suser.ID
       left join dbo.UserInfo uInfo
       on suser.ID = uInfo.UserID
       where 1 = 1 @param
       )
       
       SELECT * FROM tmp 
       WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
       order by CreateDate desc
   ]]>
    </commandText>
    <parameters>
      <param name="@TotalCount" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="GetUserCompanyInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
CompanyName,
Property,
Trade,
Position,
WorkYear,
CompanyPhone,
CompanyAddress,
CompanySite,
Witness,
WitnessPhone,
Remark,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserCompanyInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserContractInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
MobilePhone,
Telephone,
ProvinceID,
CityID,
AreaID,
PostNo,
Address,
MSN,
QQ,
TaobaoWW,
FirstRelativeName,
FirstRelation,
FirstMobile,
SecondRelativeName,
SecondRelation,
SecondMobile,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserContractInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserDebtInfoByCondition" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
      with tmp as
      (
          select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
                  A.ID,
                  A.UserID,
                  C.UserName,
                  A.DebtType,
                  B.Value DebtName,
                  A.DebtTotal,
                  A.DebtByMonth,
                  A.DebtTerm,
                  A.Status,
                  A.CreateDate,
                  A.CreateBy,
                  A.EditDate,
                  A.EditBy
          from dbo.UserDebtInfo A
          inner join DictionaryInfo B
          ON A.DebtType = b.ID
          inner join dbo.s_auth_user c
          on a.UserID = c.ID
          where 1 = 1 @param
      )
      
      SELECT * FROM tmp
      WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
      order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserHouseInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
      WITH tmp AS(
        select  ROW_NUMBER() OVER(Order by @OrderBy) AS col,
                A.ID,
                A.UserID,
                suser.UserName,
                A.HouseLocation,
                A.HouseArea,
                A.BulidTime,
                A.PayMethodID,
                B.Value PayMethodName,
                A.Owner1,
                A.Owner1Percent,
                A.Owner2,
                A.Owner2Percent,
                A.DebtYear,
                A.PayByMonth,
                A.LeftDebt,
                A.Bank,
                A.Status,
                A.CreateDate,
                A.CreateBy,
                A.EditDate,
                A.EditBy
        from dbo.UserHouseInfo A 
        inner join DictionaryInfo B
        ON A.PayMethodID = b.ID
        inner join dbo.s_auth_user suser
        on A.UserID = suser.ID
        where 1=1 @param
     )
     SELECT * FROM tmp
      WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
      order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserCarInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      WITH tmp AS(
        select  ROW_NUMBER() OVER(Order by @OrderBy) AS col,
                A.ID,
                A.UserID,
                suser.UserName,
                A.BuyWay,
                B.Value BuyWayName,
                A.Brand,
                A.Model,
                A.BuyTime,
                A.Mileage,
                A.Insurance,
                A.CalcPrice,
                A.Status,
                A.CreateDate,
                A.CreateBy,
                A.EditDate,
                A.EditBy
        from dbo.UserCarInfo A
        inner join DictionaryInfo B
        on A.BuyWay = B.ID
        inner join dbo.s_auth_user suser
        on a.UserID = suser.ID
        where 1=1 @param
      )
 
       SELECT * FROM tmp
      WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
      order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserPropertyOther" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[   
      with tmp AS
      (
        select  ROW_NUMBER() OVER(Order by @OrderBy) AS col,
                a.ID,
                a.UserID,
                suser.UserName,
                a.Comment,
                a.Status,
                a.CreateDate,
                a.CreateBy,
                a.EditDate,
                a.EditBy
        from dbo.UserPropertyOther a
        inner join dbo.s_auth_user suser
        on a.UserID = suser.ID
        where 1 = 1 @param
      )
      SELECT * FROM tmp
      WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
      order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
NickName,
Sex,
Introduction,
RealName,
CertificateType,
CertificateNo,
NativePlace,
MaritalStatus,
ChildStatus,
Degree,
SalaryLevel,
HasSheBao,
SheBaoNo,
HouseStatus,
HasCar,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserManagementInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
ManageType,
Amount,
Description,
BeginDate,
EndDate,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserManagementInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserOtherInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
HighestDegree,
HighestSchool,
Profession,
GraduateTime,
Ability,
Interest,
OtherIntroduction,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserOtherInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserPawnInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
PawnName,
Estimate,
Description,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserPawnInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserSpouseInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
RealName,
SalaryLevel,
MobilePhone,
CompanyName,
CompanyPhone,
Position,
CompanyAddress,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserSpouseInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserTradeInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
Property,
SetupDate,
BusinessPlace,
Rent,
RentTime,
TaxNo,
GongShangNo,
ProfitByYear,
EmployeeNumber,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserTradeInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserWorkExperience" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
BeginTime,
EndTime,
Company,
Department,
Witness,
WitnessPhone,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserWorkExperience where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <!--获取用户消息（带分页）-->
  <dataCommand name="GetUserMessageByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[ 
    WITH tmp AS
    (
      select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
              ID,
              ReceiveUserName,
              Title ,
              Content,
              Status,
              CreateDate,
              CreateBy
      from dbo.UserMessage 
      where 1=1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserManagementInfoByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
ManageType,
Amount,
Description,
BeginDate,
EndDate,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserManagementInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetUserAccountTradeInfoByUserID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select ID,
UserID,
TradeType,
TradeWay,
HandlingCharge,
TradeAmount,
Description,
TradeDestinationName,
TradeDestinationID,
TradeNo,
Status,
CreateDate,
CreateBy,
EditDate,
EditBy
 from dbo.UserAccountTradeInfo where UserID = @UserID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <dataCommand name="GetUserAccountTradeInfoByID" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select 
              a.ID,
              a.UserID,
              b.UserName,
              a.TradeType,
              a.TradeWay,
              a.HandlingCharge,
              a.TradeAmount,
              a.TradeDestinationName,
              a.TradeDestinationID,
              a.TradeNo,
              a.Description,
              a.CreateDate,
              a.CreateBy,
              a.EditDate,
              a.EditBy,
              a.Status
 from dbo.UserAccountTradeInfo a
 inner join dbo.S_Auth_User b
 on a.UserID = b.ID
 where a.ID = @ID;
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <dataCommand name="GetUserAccountTradeInfoByCondition" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[   
      WITH tmp AS
    (
      select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
              a.ID,
              a.UserID,
              b.UserName,
              a.TradeType,
              a.TradeWay,
              a.HandlingCharge,
              a.TradeAmount,
              acc.TotalAmount,
              a.TradeDestinationName,
              a.TradeDestinationID,
              a.TradeNo,
              a.Description,
              a.CreateDate,
              a.CreateBy,
              a.EditDate,
              a.EditBy,
              a.Status
        from dbo.UserAccountTradeInfo a 
        inner join dbo.S_Auth_User b
        on a.UserID = b.ID
        inner join dbo.UserAccountInfo acc
        on a.UserID = acc.UserID
        where 1=1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
    order by CreateDate desc
        
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <dataCommand name="GetUserCreditInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        select A.ID,
A.UserID,        
A.CreditType,
A.CreditName,
A.Comment,
A.Status,
b.Value CreditTypeName,
A.CreateDate,
A.CreateBy,
A.EditDate,
A.EditBy,
a.ApproveBy,
a.ApproveRemark,
a.ApproveDate
 from dbo.UserCreditInfo A
 inner join DictionaryInfo B
 ON A.CreditType = b.ID
 where A.UserID = @UserID
 order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <dataCommand name="GetUserCreditInfoByCondition" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      select @TotalCount = count(1)
      from dbo.UserCreditInfo A
       inner join DictionaryInfo B
       ON A.CreditType = b.ID
       inner join dbo.S_Auth_User suser
       on a.UserID = suser.ID
       where 1 = 1 @param;
       
       WITH tmp AS
      (
        select ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
              A.ID,
              A.UserID,      
              suser.UserName,
              A.CreditType,
              A.CreditName,
              A.Comment,
              A.Status,
              b.Value CreditTypeName,
              A.CreateDate,
              A.CreateBy,
              A.EditDate,
              A.EditBy,
              a.ApproveBy,
              a.ApproveRemark,
              a.ApproveDate
        from dbo.UserCreditInfo A
        inner join DictionaryInfo B
        ON A.CreditType = b.ID
        inner join dbo.S_Auth_User suser
        on a.UserID = suser.ID
        where 1 = 1 @param
        )
        
        SELECT * FROM tmp
        WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
   ]]>
    </commandText>
    <parameters>
      <param name="@TotalCount" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>
  <dataCommand name="GetUserAuthenticationInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
   WITH tmp AS
    (	
		select  ROW_NUMBER() OVER(ORDER BY @OrderBy) AS col,
				A.ID,
				A.UserID,
        C.UserName,
				A.AuthType,
				B.Value AuthTypeName,
				A.Comment,
				A.Status,
				A.CreateDate,
				A.CreateBy,
				A.EditDate,
				A.EditBy,
				a.ApproveBy,
				a.ApproveRemark,
				a.ApproveDate
				 from dbo.UserAuthenticationInfo A
				 inner join DictionaryInfo B
				 ON A.AuthType = b.ID
         inner join dbo.S_Auth_User C
         on a.UserID = c.ID
		where 1 = 1 @param
    )
    
    SELECT * FROM tmp
    WHERE col > (@PageNum -1) * @PageSize AND col <= @PageNum * @PageSize
    order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
  <dataCommand name="GetCompanyBankInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      with tmp as
      (
        select ROW_NUMBER() OVER(order by @OrderBy) as col,
              ID,
              AccountName,
              AccountID,
              BankName,
              BankImg,
              Status,
              CreateDate,
              CreateBy,
              EditDate,
              EditBy
        from dbo.CompanyBankInfo
        where 1=1 @param
    )

    select * from tmp
    where col > (@PageNum - 1) * @PageSize AND col <= @PageNum * @PageSize
    order by CreateDate desc
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>
</dataOperations>