<?xml version="1.0" encoding="utf-8" ?>
<dataOperations xmlns="http://www.w3.org/DataOperation"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!--更新广告状态-->
  <dataCommand name="UpdateAdvertisementStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.Advertisement SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新贷款状态-->
  <dataCommand name="UpdateBidHeadStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
        IF @Status = 3 --审批贷款，同时把未审核的投资一起审了，避免贷款通过后，用户再删除投资
        BEGIN
           BEGIN TRANSACTION UP
            --更新贷款状态
            UPDATE dbo.BidHead SET Status = @Status WHERE ID = @ID
           
            --更新投资状态和投资奖励
            UPDATE A
            SET A.Status = 2,
                A.Reward = A.InvestAmount * ISNULL(B.Reward,0),
                EditDate = getdate()
            FROM dbo.InvestRecord A
            INNER JOIN dbo.BidHead B
            ON A.BidID = B.ID
            WHERE B.ID = @ID;
          
            --更新投资者账户，划入投资奖励
            with tmp as
            (
              SELECT SUM(A.InvestAmount) Total,A.UserID,B.ID BidID
              FROM dbo.InvestRecord A
              INNER JOIN dbo.BidHead B
              ON A.BidID = B.ID
              GROUP BY A.UserID,B.ID
              HAVING B.ID = @ID
            )
            
            UPDATE acc
            SET acc.TotalAmount = acc.TotalAmount + t.Total * ISNULL(B.Reward,0),editDate = getdate()
            FROM dbo.UserAccountInfo acc
            INNER JOIN tmp t
            ON acc.UserID = t.UserID
            INNER JOIN dbo.BidHead B
            ON t.BidID = B.ID
          
            --插入投资奖励交易记录
            INSERT INTO dbo.UserAccountTradeInfo 
            (UserID,
            TradeType,
            TradeWay,
            HandlingCharge,
            TradeAmount,
            Description,
            TradeDestinationName,
            TradeDestinationID,
            TradeNo,
            Status,
            CreateBy)
            SELECT A.UserID,3,1,0,A.InvestAmount * ISNULL(B.Reward,0),'投资奖励','','','',2,'system'
            FROM dbo.InvestRecord A
            INNER JOIN dbo.BidHead B
            ON A.BidID = B.ID
            WHERE B.ID = @ID
          
            --插入消息通知投资者
            INSERT INTO dbo.UserMessage (ReceiveUserName,Title,Content,Status,CreateBy)
            SELECT suser.UserName,'投资奖励入账','您的投资奖励【￥'+ STR(A.Reward) +'】已入账，请到【我的账户】查看。',1,'system'
            FROM dbo.InvestRecord A
            INNER JOIN dbo.S_Auth_User suser
            ON A.UserID = suser.ID
            WHERE A.BidID = @ID
           
            IF (@@Error <> 0)
	          BEGIN
		          ROLLBACK TRANSACTION UP
	          END
	          ELSE
		          COMMIT TRANSACTION UP
        END
        ELSE
          UPDATE dbo.BidHead SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新贷款状态和交易号-->
  <dataCommand name="UpdateBidHeadTradeNoAndStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.BidHead SET Status = @Status,TradeNo = @TradeNo WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新贷款状态-->
  <dataCommand name="UpdateBidDetailStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.BidDetail SET Status = @Status WHERE ID = @DetailID
      ]]>
    </commandText>
  </dataCommand>

  <!--检查并更新Bidhead的RefundStatus,退还保证金-->
  <dataCommand name="CheckAndUpdateBidHeadReturnStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        IF NOT EXISTS (SELECT TOP 1 1 FROM dbo.BidDetail WITH(NOLOCK) WHERE BidID = @ID AND Status in (1,3,5))
        BEGIN
          begin transaction checkandup
          --更新贷款还款状态
          UPDATE dbo.BidHead SET RefundStatus = 2 WHERE ID = @ID
          --退还保证金
          UPDATE acc
            SET acc.TotalAmount = acc.TotalAmount + ISNULL(B.Deposit,0)
          FROM dbo.UserAccountInfo acc
          INNER JOIN dbo.BidHead B
          ON acc.UserID = B.UserID
          WHERE B.ID = @ID
          --插入保证金交易记录
          INSERT INTO dbo.UserAccountTradeInfo
          (UserID,TradeType,TradeWay,HandlingCharge,TradeAmount,Description,Status,CreateBy)
          SELECT UserID,6,1,0,Deposit,'退还保证金',2,'system'
          FROM  dbo.BidHead
          WHERE ID = @ID          
          
          --插入消息记录
          INSERT INTO dbo.UserMessage (ReceiveUserName,Title,Content,Status,CreateBy)
          SELECT suser.UserName,'保证金退还','您的投资保证金￥【'+ replace(STR(B.Deposit,18,2),' ','') +'】已归还到账户,请到【我的账户】查看。',1,'system'
          FROM dbo.S_Auth_User suser
          INNER JOIN dbo.BidHead B
          ON  suser.ID = B.UserID
          WHERE B.ID = @ID
          
          IF (@@Error <> 0)
	          BEGIN
		          ROLLBACK TRANSACTION checkandup
	          END
	          ELSE
		          COMMIT TRANSACTION checkandup
          
        END
        ELSE
          UPDATE dbo.BidHead SET RefundStatus = 1 WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新交易号-->
  <dataCommand name="UpdateBidDetailTradeNo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.BidDetail SET ReturnTradeNo = @TradeNo,ReturnDate = getdate(),Status = @Status WHERE ID = @DetailID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新投资状态-->
  <dataCommand name="UpdateInvestRecordStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.InvestRecord SET Status = @Status,ApproveBy='admin',ApproveDate=getDate() WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户账户金额-->
  <dataCommand name="UpdateUserAccountAmount" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        IF EXISTS (SELECT TOP 1 1 FROM dbo.UserAccountInfo WHERE UserID = @UserID AND TotalAmount + @ChangeAmount >= 0  AND Status = 1)
        BEGIN
          UPDATE dbo.UserAccountInfo SET TotalAmount = TotalAmount + @ChangeAmount WHERE UserID = @UserID
        END
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户账户金额-->
  <dataCommand name="UpdateUserAccountOtherAmount" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
          UPDATE dbo.UserAccountInfo 
          SET PawnWorth = @PawnWorth,
              LimitAmount = @LimitAmount,
              Grade = @Grade,
              EditBy = @EditBy,
              EditDate = @EditDate
          WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户账户状态-->
  <dataCommand name="ApproveUserAccountInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
          UPDATE dbo.UserAccountInfo 
          SET Status = @Status
          WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户认证状态-->
  <dataCommand name="ApproveUserAuthenticationInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserAuthenticationInfo SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户交易状态-->
  <dataCommand name="ApproveUserAccountTradeInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserAccountTradeInfo SET Status = @Status,EditDate = getdate() WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户交易状态，包含交易流水号-->
  <dataCommand name="ApproveUserTradeInfoWithTradeNo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserAccountTradeInfo SET Status = @Status , TradeNo = @TradeNo,EditDate = getdate() WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户资产负债状态-->
  <dataCommand name="ApproveUserDebtInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserDebtInfo SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户信用资料-->
  <dataCommand name="ApproveUserCreditInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserCreditInfo SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户房产资料-->
  <dataCommand name="ApproveUserHouseInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserHouseInfo SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户汽车资料-->
  <dataCommand name="ApproveUserCarInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserCarInfo SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--更新用户其他资产资料-->
  <dataCommand name="ApproveUserPropertyOther" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.UserPropertyOther SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--审核本金返还记录-->
  <dataCommand name="UpdateInvestPrincipal" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
          UPDATE A
            SET A.Status = @Status ,ReceiveDate = getdate() , TradeNo = @TradeNo 
          FROM dbo.InvestReturnPrincipal A
          INNER JOIN dbo.BidHead B
          ON A.BidID = B.ID
          WHERE A.ID = @ID AND B.RefundStatus = 2
      ]]>
    </commandText>
  </dataCommand>

  <!--审核利息返还记录-->
  <dataCommand name="UpdateInvestAccrual" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.InvestReturnAccrual SET Status = @Status ,ReceiveDate = getdate() , TradeNo = @TradeNo WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--审核利息返还记录-->
  <dataCommand name="ReturnDeposit" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.Bidhead SET DepositStatus = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <!--审核利息返还记录-->
  <dataCommand name="UpdateCompanyBankInfo" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        UPDATE dbo.CompanyBankInfo SET Status = @Status WHERE ID = @ID
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="InsertOrUpdateS_Auth_User_Background" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        if exists (select top 1 1 from dbo.S_Auth_User_Background where UserName = @UserName)
 begin 
update dbo.S_Auth_User_Background
set	UserName=@UserName,
Email=@Email,
Password=@Password,
Status=@Status,
EditDate=@EditDate,
EditBy=@EditBy 
where UserName = @UserName
 end
 else
 insert into dbo.S_Auth_User_Background 
 (UserName,
Email,
Password,
Status,
CreateBy 
)values(
@UserName,
@Email,
@Password,
@Status,
@CreateBy
)
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <dataCommand name="DeleteS_Auth_User_BackgroundByKey" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
      --删除后台账户
begin transaction

declare @RoleId int;

select @RoleId=roleid from dbo.S_Auth_RoleUser where userid=@ID;

--删除账户与角色的管理
delete dbo.S_Auth_RoleUser where userid=@ID and roleid=@RoleId;

--删除角色和模块的关联
delete dbo.S_Auth_User_Background where id=@ID;

commit transaction
   ]]>
    </commandText>
    <parameters>

    </parameters>
  </dataCommand>

  <!--更新用户状态-->
  <dataCommand name="UpdateBackgroundUserStatus" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
      UPDATE dbo.S_Auth_User_Background SET Status = @Status WHERE ID = @UserID
      ]]>
    </commandText>
  </dataCommand>

  <!--User Login-->
  <dataCommand name="BackLogin" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
SELECT 
	ID
FROM 
	LoanDB.dbo.S_Auth_User_Background
WHERE 
	UserName=@UserName
	AND Password=@Password
  AND Status = 1
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="SaveBackPassword" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
        
IF((SELECT COUNT(ID) FROM dbo.S_Auth_User_Background WHERE Password=@oPassword)>0)
BEGIN 
	UPDATE dbo.S_Auth_User_Background
	SET Password=@Password
	WHERE UserName=@UserName
END
ELSE
BEGIN
	SELECT -1  
END
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="GetBackgroundAccount" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
WITH TMP AS(
SELECT ROW_NUMBER() OVER(ORDER BY @OrderBy) AS COL,
	   ID,
       UserName,
       Email,
       Status,
       CreateDate,
       CreateBy 
FROM DBO.S_AUTH_USER_BACKGROUND
WHERE 1=1 @param
)
SELECT ID,
       UserName,
       Email,
       Status,
       CreateDate,
       CreateBy
FROM TMP
WHERE COL>(@PageNum -1) * @PageSize AND COL<= @PageNum * @PageSize
order by CreateDate desc
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="GetRoles" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
WITH TMP AS(
SELECT ROW_NUMBER() OVER(ORDER BY @OrderBy) AS COL,
	   ID,
       RoleName,
       Email,
       Status,
       Comment,
       CreateDate,
       CreateBy 
FROM dbo.S_Auth_Role
WHERE 1=1 @param
)
SELECT ID,
       RoleName,
       Email,
       Status,
       Comment,
       CreateDate,
       CreateBy 
FROM TMP
WHERE COL>(@PageNum -1) * @PageSize AND COL<= @PageNum * @PageSize
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="GetRoleAccount" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
select b.UserName,
	   c.RoleName,
	   c.Comment,
	   b.ID as UserId 
from dbo.S_Auth_RoleUser a 
join dbo.S_Auth_User_Background b on a.userid=b.id
join dbo.S_Auth_Role c on a.roleid=c.id
where c.id=@id
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="DeleteRoleAccount" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
delete dbo.S_Auth_RoleUser
where RoleId=@RoleId and UserID=@UserID
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="ResetBackPassword" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
      UPDATE dbo.S_Auth_User_Background
	      SET Password=@Password
	      WHERE ID=@UserID
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="DeleteRole" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[     
begin transaction
delete dbo.S_Auth_Role
where id=@RoleId;
delete dbo.S_Auth_RoleUser
where roleid=@RoleId;
commit transaction
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="GetAuthMoudle" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      

WITH TMP AS(
SELECT ROW_NUMBER() OVER(ORDER BY @OrderBy) AS COL,
	   ID,
       Moudle_Name,
       ParentID,
       Moudle_Link,
       Status,
       Comment,
       CreateDate,
       CreateBy 
FROM dbo.S_Auth_Moudle
WHERE 1=1 @param
)
SELECT ID,
       Moudle_Name,
       ParentID,
       Moudle_Link,
       Status,
       Comment,
       CreateDate,
       CreateBy 
FROM TMP
WHERE COL>(@PageNum -1) * @PageSize AND COL<= @PageNum * @PageSize
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="GetRoleByMoudleId" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
select b.RoleName,
	   c.Moudle_Name,
	   c.Moudle_Link,
	   c.Comment as MoudleComment,
	   b.Comment as RoleComment,
     a.roleid as RoleId,
	   a.moudleid as MoudleId
from dbo.S_Auth_RoleMoudle a 
join dbo.S_Auth_Role b on a.roleid=b.id
join dbo.S_Auth_Moudle c on a.moudleid=c.id
where a.moudleid=@id
      ]]>
    </commandText>
  </dataCommand>

  <dataCommand name="DeleteRoleFromMoudle" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
delete dbo.S_Auth_RoleMoudle
where roleid=@roleid and moudleid=@moudleid
      ]]>
    </commandText>
  </dataCommand>

  <!--获取用户对应的功能模块-->
  <dataCommand name="GetUserRoleMoudles" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
          SELECT  A.ID UserID,
                  A.UserName,
                  D.ID MoudleID,
                  D.Moudle_Name,
                  D.Moudle_Link,
                  D.Comment,
                  E.ID RoleID,
                  E.RoleName,
                  D.EditBy,
                  D.ParentID
          FROM dbo.S_Auth_User A
          INNER JOIN dbo.S_Auth_RoleUser B
          ON A.ID = B.UserID
          INNER JOIN dbo.S_Auth_RoleMoudle C
          ON B.RoleID = C.RoleID
          INNER JOIN dbo.S_Auth_Moudle D
          ON C.MoudleID = D.ID
          INNER JOIN dbo.S_Auth_Role E
          ON C.RoleID = E.ID
          WHERE A.ID = @UserID
          order by D.ParentID asc
      ]]>
    </commandText>
  </dataCommand>

  <!--获取角色对应的功能模块-->
  <dataCommand name="GetRoleMoudles" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
          SELECT A.ID RoleId,A.Comment RoleComment,A.RoleName,C.ID MoudleId,C.Moudle_Name,C.Comment MoudleComment,C.Moudle_Link
          FROM dbo.S_Auth_Role A
          INNER JOIN dbo.S_Auth_RoleMoudle B
          ON B.RoleID = A.ID
          INNER JOIN dbo.S_Auth_Moudle C
          ON B.MoudleID = C.ID
          WHERE A.ID = @RoleID
      ]]>
    </commandText>
  </dataCommand>

  <!--获取角色对应的功能模块-->
  <dataCommand name="SaveRoleMoudles" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[      
         INSERT INTO dbo.S_Auth_RoleMoudle(RoleID,MoudleID,CreateBy) VALUES(@RoleID,@MoudleID,@UserID)
      ]]>
    </commandText>
  </dataCommand>

  <!--删除角色对应的模块-->
  <dataCommand name="DeleteRoleMoudles" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
         IF EXISTS (SELECT TOP 1 1 FROM dbo.S_Auth_RoleMoudle WHERE RoleID = @RoleID)
         BEGIN
          DELETE FROM dbo.S_Auth_RoleMoudle WHERE RoleID = @RoleID
         END
         ELSE
          SET @Result = 1
      ]]>
    </commandText>
    <parameters>
      <param name="@Result" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>


  <!--资金统计信息-->
  <dataCommand name="GetAccountStatics" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[
      SELECT @TotalCount = COUNT(1)
       from dbo.USERACCOUNTTRADEINFO A
          INNER JOIN dbo.S_Auth_User B
          ON B.ID = A.UserID
          INNER JOIN dbo.UserInfo C
          ON B.ID = C.UserID
          WHERE 1=1 @param;
      
    WITH TMP AS(
        SELECT	ROW_NUMBER() OVER(ORDER BY @OrderBy) AS COL,
                B.UserName,
		            REPLACE(C.RealName,' ','') RealName,
		            A.TradeType,
		            A.TradeWay,
		            A.TradeAmount,
		            A.CreateDate
          from dbo.USERACCOUNTTRADEINFO A
          INNER JOIN dbo.S_Auth_User B
          ON B.ID = A.UserID
          INNER JOIN dbo.UserInfo C
          ON B.ID = C.UserID
          WHERE 1=1 @param
    )
      SELECT    UserName,
		            RealName,
		            TradeType,
		            TradeWay,
		            TradeAmount,
		            CreateDate
      FROM TMP
      WHERE COL>(@PageNum -1) * @PageSize AND COL<= @PageNum * @PageSize
      order by CreateDate desc
      ]]>
    </commandText>
    <parameters>
      <param name="@TotalCount" dbType="Int32" direction="Output"/>
    </parameters>
  </dataCommand>

  <dataCommand name="GetAccountStaticsForExport" database="Loan" commandType="Text">
    <commandText>
      <![CDATA[    
    WITH TMP AS(
        SELECT	ROW_NUMBER() OVER(ORDER BY @OrderBy) AS COL,
                B.UserName 用户名,
		            REPLACE(C.RealName,' ','') 真实姓名,
		            case A.TradeType 
                  when 1 then '充值'
                  when 2 then '提现' 
                  when 3 then '放款'
                  when 4 then '扣款'
                  when 5 then '还款'
                  when 6 then '退款' END 交易类型,
		            case A.TradeWay
                  when 1 then '在线交易'
                  when 2 then '线下交易' END 交易方式,
               case A.TradeType
                  when 1 then '流入'
                  when 4 then '流入'
                  when 5 then '流入'
                  when 2 then '流出'
                  when 3 then '流出'
                  when 6 then '流出' END 资金流向,
		            A.TradeAmount 金额,
		            A.CreateDate 发生时间
          from dbo.USERACCOUNTTRADEINFO A
          INNER JOIN dbo.S_Auth_User B
          ON B.ID = A.UserID
          INNER JOIN dbo.UserInfo C
          ON B.ID = C.UserID
          WHERE 1=1 @param
    )
      SELECT    用户名,
		            真实姓名,
		            交易类型,
		            交易方式,
                资金流向,
		            金额,
		            发生时间
      FROM TMP
      WHERE COL>(@PageNum -1) * @PageSize AND COL<= @PageNum * @PageSize
      ]]>
    </commandText>
    <parameters>
    </parameters>
  </dataCommand>
  
</dataOperations>